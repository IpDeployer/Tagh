name: Telegram Bot Runner

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  push:
    branches: [ main ]

jobs:
  run-bot:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-telegram-bot requests

    - name: Run Telegram Bot
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      run: |
        cat << "EOF" > bot.py
        import os
        import requests
        import base64
        from telegram import Update, Bot
        from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

        def start(update: Update, context: CallbackContext) -> None:
            update.message.reply_text('Send me a BPB panel link to decode!')

        def handle_message(update: Update, context: CallbackContext) -> None:
            url = update.message.text
            chat_id = update.message.chat_id
            
            try:
                # Fetch the content from the provided URL
                response = requests.get(url)
                response.raise_for_status()
                
                # Decode base64 content
                decoded = base64.b64decode(response.text).decode('utf-8')
                
                # Split configurations into individual lines
                configs = decoded.split('\n')
                
                # Send each configuration separately
                for config in configs:
                    if config.strip():  # Skip empty lines
                        context.bot.send_message(chat_id=chat_id, text=config.strip())
                        
            except Exception as e:
                context.bot.send_message(chat_id=chat_id, text=f"Error: {str(e)}")

        def main() -> None:
            bot_token = os.getenv('7671541547:AAH0Frbt2I6I3VJWRsXCBO8LbmIhMhH6Pao')
            updater = Updater(bot_token)
            dispatcher = updater.dispatcher

            dispatcher.add_handler(CommandHandler("start", start))
            dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

            updater.start_polling()
            updater.idle()

        if __name__ == '__main__':
            main()
        EOF

        python bot.py