name: Telegram Bot Runner

on:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install python-telegram-bot requests

    - name: Run Telegram Bot
      run: |
        cat << "EOF" > bot.py
        import os
        import requests
        import base64
        from telegram import Update, Bot, ReplyKeyboardMarkup, KeyboardButton
        from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

        # Hardcoded bot token (INSECURE!)
        BOT_TOKEN = '7671541547:AAH0Frbt2I6I3VJWRsXCBO8LbmIhMhH6Pao'

        def get_keyboard():
            return ReplyKeyboardMarkup([
                [KeyboardButton("/start"), KeyboardButton("/help")],
                [KeyboardButton("Decode BPB Link")]
            ], resize_keyboard=True)

        def start(update: Update, context: CallbackContext) -> None:
            update.message.reply_text(
                "Welcome to BPB Decoder Bot!\nSend a BPB link:",
                reply_markup=get_keyboard()
            )

        def help_command(update: Update, context: CallbackContext) -> None:
            update.message.reply_text(
                "Send your BPB panel link directly or use the button!",
                reply_markup=get_keyboard()
            )

        def handle_message(update: Update, context: CallbackContext) -> None:
            text = update.message.text
            
            if text == "Decode BPB Link":
                update.message.reply_text("Send your BPB link now:")
                return
                
            if text.startswith('http'):
                process_link(update, context, text)
            else:
                update.message.reply_text("Send a valid BPB link")

        def process_link(update: Update, context: CallbackContext, url: str):
            chat_id = update.message.chat_id
            try:
                response = requests.get(url)
                decoded = base64.b64decode(response.text).decode('utf-8')
                configs = [c.strip() for c in decoded.split('\n') if c.strip()]
                
                for config in configs:
                    context.bot.send_message(chat_id, config)
                
                update.message.reply_text("Done!", reply_markup=get_keyboard())
                
            except Exception as e:
                context.bot.send_message(chat_id, f"Error: {str(e)}")

        def main() -> None:
            updater = Updater(BOT_TOKEN)
            dispatcher = updater.dispatcher

            dispatcher.add_handler(CommandHandler("start", start))
            dispatcher.add_handler(CommandHandler("help", help_command))
            dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

            updater.start_polling()
            updater.idle()

        if __name__ == '__main__':
            main()
        EOF

        python bot.py